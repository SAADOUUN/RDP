name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force

          # Disable NLA (optional)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force

          # Set Security Layer to RDP (optional)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Remove existing firewall rule if any
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null

          # Allow RDP through firewall
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart RDP service to apply changes
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        id: rdpuser
        shell: powershell
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }

          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # Create user if not exists
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member "RDP"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          }

          Write-Output "password=$password" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Install Tailscale
        shell: powershell
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i `"$installerPath`" /quiet /norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        id: tailscale
        shell: powershell
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey="${{ secrets.TAILSCALE_AUTH_KEY }}" --hostname="gh-runner-$env:GITHUB_RUN_ID"

          # Wait until IP is assigned
          $tsIP = $null
          for ($i = 0; $i -lt 10 -and -not $tsIP; $i++) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          Write-Output "ip=$tsIP" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Verify RDP Accessibility
        shell: powershell
        run: |
          $ip = "${{ steps.tailscale.outputs.ip }}"
          Write-Host "Tailscale IP: $ip"

          $testResult = Test-NetConnection -ComputerName $ip -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "âœ… TCP connectivity successful!"

      - name: Maintain Connection
        shell: powershell
        run: |
          $ip = "${{ steps.tailscale.outputs.ip }}"
          $password = "${{ steps.rdpuser.outputs.password }}"

          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address : $ip"
          Write-Host "Username: RDP"
          Write-Host "Password: $password"
          Write-Host "==================`n"

          while ($true) {
              Write-Host "[$(Get-Date)] RDP session active... (Ctrl+C to stop)"
              Start-Sleep -Seconds 300
          }
